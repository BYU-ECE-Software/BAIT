name: Build and Push Docker Image to GHCR and Run on Self-Hosted Runner

on:
  workflow_dispatch:
  push:
    branches:
      - main


jobs:
  build-and-deploy:
    runs-on: [self-hosted, capstone]  # This specifies to use the self-hosted runner
    # capstone added so that it specifically targets the CyberGamesVM runner

    steps:
      # Step 0: Troubleshooting (comment out when not in use)
      # TEMP
      - name: Need to find the DB URL
        shell: python
        env:
          MY_VAL: ${{ secrets.DATABASE_URL }}
        run: |
          import os
          for q in (os.getenv("MY_VAL")):
            print(q)


      # # Check which user is using the program. This is useful for troubleshooting permissions issues. 
      # - name: Show current user
      #   run: whoami

      # # Get the user's user ID 
      # - name: Show current UID
      #   run: id -u

      # # Get user's groups 
      # - name: Show user groups
      #   run: id -Gn

      # # Get the host name
      # - name: Show hostname
      #   run: hostname

      # # Print working directory 
      # - name: Print working directory 
      #   run: pwd
      
      # # Check if you have docker permissions (Do this last of the troubleshooting steps)
      # - name: Check Docker access
      #   run: docker ps

#      # Step 1: Checkout the code
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      # Step 2: Set up Docker Buildx for multi-platform support (optional)
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      # Step 3: Log in to GHCR using GitHub Secrets
#      - name: Log in to GHCR
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.ECE_GHCR_TOKEN }}
#
#      # Step 4: Create secret files for environment variables
#      - name: Create Secret Files
#        run: |
#          echo -n "${{ secrets.OPENAI_API_KEY }}" > openai_key.txt
#          echo -n "${{ secrets.DATABASE_URL }}" > database_url.txt
#
#      # Step 5: Build Docker image with environment variables
#      - name: Build Docker image
#        run: |
#          DOCKER_BUILDKIT=1 docker build \
#            --secret id=openai_key,src=openai_key.txt \
#            --secret id=database_url,src=database_url.txt \
#            -t ghcr.io/byu-ece-software/sepptic:latest .
#
#      # Step 6: Delete secret files
#      - name: Delete Secret Files
#        run: |
#          rm openai_key.txt
#          rm database_url.txt
#
#      # Step 7: Push the Docker image to GHCR
#      - name: Push Docker image to GHCR
#        run: |
#          docker push ghcr.io/byu-ece-software/sepptic:latest
#
#      # Step 8: Stop any previously running container (optional)
#      - name: Stop and remove previous container (if any)
#        run: |
#          docker stop sepptic || true
#          docker rm sepptic || true
#
#      # Step 9: Start the Docker container on the self-hosted runner
#      - name: Start Docker container
#        run: |
#          docker run -d --name sepptic \
#            --network sepptic_sepptic \
#            -e DATABASE_URL=${{ secrets.CONTAINER_DATABASE_URL }} \
#            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
#            ghcr.io/byu-ece-software/sepptic:latest
